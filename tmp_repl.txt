// To start parcel. It will watch the changes in compiled purescript code.
npm run dev

// To compile and watch
spago build --watch

// or you can use pscid to build
// is this like a compiling + watch with nice interface?
pscid


add this to your package.json to build stuff
    "build": "webpack ./main.js",

or you can use

  npx webpack ./main.js


=========deployment============
npx webpack ./main.js
cd ~/Desktop/omedusyo.github.io/pendulum/
cp ~/PROJECTS/PureScript/classical-mechanics/index-for-deployment.html index.html
cp ~/PROJECTS/PureScript/classical-mechanics/dist/main.js dist/main.js
git add .
git commit -m "Classical Mechanics update"
git push
cd ~/PROJECTS/PureScript/classical-mechanics

firefox https://github.com/omedusyo/omedusyo.github.io/actions
firefox https://omedusyo.github.io/pendulum/index.html
=========deployment============



spago install lib1 lib2




spago repl

{foo: 123, bar: 512} { foo = 3 }

:t (\r -> r { foo = 3 })

f :: forall (r :: Row Type) (a :: Type) . { foo :: a | r } -> { foo :: Int | r }



import Prelude

import Data.List


import Hello


:t square


square 5

:t (\x -> x*x) 5.5

:t 5


spago run

spago bundle-app --watch

import Data.List

:kind List

:kind Lam

:t _.foo

:k List

:k List Int

((\x -> x + 1) >>> (\y -> y*y)) 5


:t log

log "\"hello\"" >>= (\_ -> log "wat")


Effect.random

import Effect.Random (random, randomBool)

:t random

data Pair a b = Pair a b

derive instance showPair :: (Show a, Show b) => Show (Pair a b)

instance showPair :: (Show a, Show b) => Show (Pair a b) where
  show (Pair x y) = "(" <> show x <> ", " <> show y <> ")"

"(" <> show 3 <> ", " <> show true <> ")"

"dsad" <> "ds"

Pair 3 4

randomBool >>= (\b -> random >>= (\x -> pure 1))

[1,"dsa"]

:t pure

:t  (>>=)



import Data.Array as Array


[1,2,3] # Array.splitAt 2

Array.replicate 3 512



spago repl

import ClassicalMechanics.Pendulum

:r

microAction = microActionPendulum (config0 5.0)

:t microAction

integrate microAction 0.2 { time: 0.0, position: 0.0, velocity: 0.0 } 0.001

:r

import Data.Number ( cos, pi )

pi


3.0 / 2.0 + 1.0




gg

import Data.Number ( pi )

1.3 % 2

:t mod

2.0*pi

mod (2.0 * pi) 15.0


import ClassicalMechanics.Pendulum as Pendulum

:r

:t Pendulum.modByFloat

Pendulum.modByFloat 3.0 8.4


:paste
safsdf x y = 
  x + y

import Data.Number ( cos, sin, pi )

:paste
microFlow { massR, massS, radiusR, radiusS, gravity } { time, positionR, positionS, velocityR, velocityS } epsilon =
  let u = cos (positionR - positionS)
      v = sin (positionR - positionS)
      radiusProduct = radiusR*radiusS
      massSum = massR + massS
      a = massSum*radiusR*radiusR + massS * radiusProduct * u
      b = radiusProduct*u
      c = radiusS*radiusS
      x = -(radiusS*radiusProduct*v*velocityS*velocityS + 0.5*gravity*massSum*radiusR*cos positionR)
      y = radiusProduct*v*(massS*velocityR*velocityS + velocityR*(velocityR - velocityS))
      a' = 1.0/a 
      b' = - b/(a*c)
      c' = 1.0/c
      x' = a'*x + b'*y
      y' = c'*y
   in
   { time: time + epsilon 
   , positionR: (positionR + epsilon * velocityR)
   , positionS: (positionS + epsilon * velocityS)
   , velocityR: velocityR + epsilon * x'
   , velocityS: velocityS + epsilon * y'
   }



:paste
state0 =
  { time: 0.0
  , positionR: -0.25 * 2.0*pi
  , positionS: -0.35 * 2.0*pi
  , velocityR: -0.0
  , velocityS: 0.0
  }

:paste
config0 =
  { gravity: 9.8 -- meter/second^2
  , radiusR: 25.0 -- meter
  , radiusS: 15.0 -- meter
  , massR : 5.0 -- kg
  , massS :  1.25 -- kg
  }

microFlow config0 state0 0.001
